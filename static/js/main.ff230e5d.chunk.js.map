{"version":3,"sources":["App.js","index.js","App.module.css"],"names":["DEFAULT_BOARD","Array","Board","next","onRestartClick","onSquareClick","squares","winner","props","className","styles","Status","every","Boolean","Squares","map","square","index","Square","onClick","Restart","App","useState","setSquares","useMemo","filter","length","getNext","line","number","find","a","b","c","getWinner","useCallback","undefined","slice","Game","GameBoard","rootElement","document","getElementById","ReactDOM","render","module","exports"],"mappings":"oRAWMA,EAAa,YAAOC,MAAM,IAoC1BC,EAAQ,SAAH,OACVC,EAAI,EAAJA,KACAC,EAAc,EAAdA,eACAC,EAAa,EAAbA,cACAC,EAAO,EAAPA,QACAC,EAAM,EAANA,OACGC,EAAK,wBAER,gDAASA,GAAK,cACb,qBAAKC,UAAWC,IAAOC,OAAO,SAC5BJ,EAAM,kBACOA,GACXD,EAAQM,MAAMC,SACd,OAAM,uBACUV,KAEpB,qBAAKM,UAAWC,IAAOI,QAAQ,SAC7BR,EAAQS,KAAI,SAACC,EAAQC,GAAK,OAC1B,wBACCR,UAAWC,IAAOQ,OAElBC,QAAS,kBAAMd,EAAcY,EAAM,EAAC,SAEnCD,GAHIC,EAIG,MAGX,wBAAQR,UAAWC,IAAOU,QAASD,QAASf,EAAe,wBAGtD,EAIMiB,EAAM,SAAAb,GAClB,MAA8Bc,mBAAStB,GAAc,mBAA9CM,EAAO,KAAEiB,EAAU,KAGpBpB,EAAOqB,mBAAQ,kBAnDN,SAAAlB,GAAO,OACtBA,EAAQmB,OAAOZ,SAASa,OAAS,IAAM,EAAI,IAAM,GAAI,CAkD1BC,CAAQrB,EAAQ,GAAE,CAACA,IACxCC,EAASiB,mBAAQ,kBAxEN,SAAAlB,GAAO,aAciB,QAdjB,EACxB,CACC,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGNS,KAAI,SAAAa,GAAI,OAAIA,EAAKb,KAAI,SAAAc,GAAM,OAAIvB,EAAQuB,EAAO,GAAC,IAE/CC,MAAK,mCAAEC,EAAC,KAAEC,EAAC,KAAEC,EAAC,YAAMF,IAAMC,GAAKD,IAAME,CAAC,WAAC,aAbzC,EAa4C,EAAG,CA0DlBC,CAAU5B,EAAQ,GAAE,CAACA,IAC5CF,EAAiB+B,uBAAY,kBAAMZ,EAAWvB,EAAc,GAAE,CACnEuB,IAEKlB,EAAgB8B,uBACrB,SAAAlB,GAAK,YACOmB,IAAX7B,QAA2C6B,IAAnB9B,EAAQW,GAC7BM,EAAW,GAAD,mBACPjB,EAAQ+B,MAAM,EAAGpB,IAAM,CAC1Bd,GAAI,YACDG,EAAQ+B,MAAMpB,EAAQ,WAEzBmB,CAAS,GACb,CAACjC,EAAMoB,EAAYjB,EAASC,IAG7B,OACC,6CAAKE,UAAWC,IAAO4B,MAAU9B,GAAK,aACrC,qBAAKC,UAAWC,IAAO6B,UAAU,SAChC,cAAC,EAAK,CAEJnC,iBACAC,gBACAF,OACAG,UACAC,eAMN,ECjHMiC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAU,UACT,cAAC,EAAG,MAENJ,E,oBCRFK,EAAOC,QAAU,CAAC,KAAO,kBAAkB,QAAU,qBAAqB,OAAS,oBAAoB,QAAU,qBAAqB,OAAS,oBAAoB,SAAW,sB","file":"static/js/main.ff230e5d.chunk.js","sourcesContent":["// @ts-check\n\nimport { useCallback, useMemo, useState } from \"react\";\nimport styles from \"./App.module.css\";\n\n// We define a few JSDocs types to make everything better...\n/** @typedef {\"X\"|\"O\"|undefined} Square */\n/** @typedef {ReadonlyArray<Square>} Squares */\n\n// The default state of the board is set in a constant...\n/** @type {Squares} */\nconst DEFAULT_BOARD = [...Array(9)];\n\n/** @param {Squares} squares */\nconst getWinner = squares =>\n\t[\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t\t[6, 7, 8],\n\t\t[0, 3, 6],\n\t\t[1, 4, 7],\n\t\t[2, 5, 8],\n\t\t[0, 4, 8],\n\t\t[2, 4, 6]\n\t]\n\t\t// We map every index to the current value in `squares`...\n\t\t.map(line => line.map(number => squares[number]))\n\t\t// We find the winner line or return `undefined`...\n\t\t.find(([a, b, c]) => a === b && a === c)?.[0];\n\n/**\n * @param {Squares} squares\n * @returns {NonNullable<Square>}\n */\nconst getNext = squares =>\n\tsquares.filter(Boolean).length % 2 === 0 ? \"X\" : \"O\";\n\n// We use the types coming from React in JSDocs\n/**\n * @type {import(\"react\").FunctionComponent<JSX.IntrinsicElements[\"div\"] & {\n *  next?: Square,\n *  onRestartClick?: import(\"react\").MouseEventHandler<HTMLButtonElement>,\n *  onSquareClick?: (index: number) => void,\n *  squares?: Squares,\n *  winner?: Square\n * }>}\n */\nconst Board = ({\n\tnext,\n\tonRestartClick,\n\tonSquareClick,\n\tsquares,\n\twinner,\n\t...props\n}) => (\n\t<div {...props}>\n\t\t<div className={styles.Status}>\n\t\t\t{winner\n\t\t\t\t? `Winner: ${winner}`\n\t\t\t\t: squares.every(Boolean)\n\t\t\t\t? \"Draw\"\n\t\t\t\t: `Next player: ${next}`}\n\t\t</div>\n\t\t<div className={styles.Squares}>\n\t\t\t{squares.map((square, index) => (\n\t\t\t\t<button\n\t\t\t\t\tclassName={styles.Square}\n\t\t\t\t\tkey={index}\n\t\t\t\t\tonClick={() => onSquareClick(index)}\n\t\t\t\t>\n\t\t\t\t\t{square}\n\t\t\t\t</button>\n\t\t\t))}\n\t\t</div>\n\t\t<button className={styles.Restart} onClick={onRestartClick}>\n\t\t\trestart\n\t\t</button>\n\t</div>\n);\n\n/** @type {import(\"react\").FunctionComponent<JSX.IntrinsicElements[\"div\"]>} */\nexport const App = props => {\n\tconst [squares, setSquares] = useState(DEFAULT_BOARD);\n\n\t// From here we use `useMemo` and `useCallback` to avoid re-renders...\n\tconst next = useMemo(() => getNext(squares), [squares]);\n\tconst winner = useMemo(() => getWinner(squares), [squares]);\n\tconst onRestartClick = useCallback(() => setSquares(DEFAULT_BOARD), [\n\t\tsetSquares\n\t]);\n\tconst onSquareClick = useCallback(\n\t\tindex =>\n\t\t\twinner === undefined && squares[index] === undefined\n\t\t\t\t? setSquares([\n\t\t\t\t\t\t...squares.slice(0, index),\n\t\t\t\t\t\tnext,\n\t\t\t\t\t\t...squares.slice(index + 1)\n\t\t\t\t  ])\n\t\t\t\t: undefined,\n\t\t[next, setSquares, squares, winner]\n\t);\n\n\treturn (\n\t\t<div className={styles.Game} {...props}>\n\t\t\t<div className={styles.GameBoard}>\n\t\t\t\t<Board\n\t\t\t\t\t{...{\n\t\t\t\t\t\tonRestartClick,\n\t\t\t\t\t\tonSquareClick,\n\t\t\t\t\t\tnext,\n\t\t\t\t\t\tsquares,\n\t\t\t\t\t\twinner\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"App_Game__1uG_v\",\"Squares\":\"App_Squares__snQ1y\",\"Status\":\"App_Status__2jISm\",\"Restart\":\"App_Restart__lh_1d\",\"Square\":\"App_Square__XFlYI\",\"GameInfo\":\"App_GameInfo__nxbbb\"};"],"sourceRoot":""}